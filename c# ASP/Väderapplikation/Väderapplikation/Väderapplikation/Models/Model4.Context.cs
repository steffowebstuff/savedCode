//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Väderapplikation.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ss222enProjectEntities5 : DbContext
    {
        public ss222enProjectEntities5()
            : base("name=ss222enProjectEntities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<PlacesExt> PlacesExts { get; set; }
    
        public virtual int spDeleteAllPlacesUsername(string projectuser)
        {
            var projectuserParameter = projectuser != null ?
                new ObjectParameter("projectuser", projectuser) :
                new ObjectParameter("projectuser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllPlacesUsername", projectuserParameter);
        }
    
        public virtual ObjectResult<spGetAllPlacesExtUsername_Result> spGetAllPlacesExtUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPlacesExtUsername_Result>("spGetAllPlacesExtUsername", usernameParameter);
        }
    
        public virtual ObjectResult<spGetSpecificPlace_Result> spGetSpecificPlace(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSpecificPlace_Result>("spGetSpecificPlace", idParameter);
        }
    
        public virtual int spInsertPlacesExt(string place, Nullable<decimal> longitude, Nullable<decimal> latitude, string projectuser, string region)
        {
            var placeParameter = place != null ?
                new ObjectParameter("place", place) :
                new ObjectParameter("place", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(decimal));
    
            var projectuserParameter = projectuser != null ?
                new ObjectParameter("projectuser", projectuser) :
                new ObjectParameter("projectuser", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPlacesExt", placeParameter, longitudeParameter, latitudeParameter, projectuserParameter, regionParameter);
        }
    }
}
